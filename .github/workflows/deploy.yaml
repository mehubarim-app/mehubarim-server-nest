name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js 16
      - name: Set up Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install dependencies using npm ci
      - name: Install dependencies
        run: npm ci

      # Build the project
      - name: Build the project
        run: npm run build

      # Set the app name and env based on the branch
      - name: Set app name and env based on branch
        id: set_app_name_env
        run: |
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            echo "APP_NAME=mehubarim-server" >> $GITHUB_ENV
            echo "NODE_ENV=production" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == "refs/heads/dev" ]]; then
            echo "APP_NAME=mehubarim-server-dev" >> $GITHUB_ENV
            echo "NODE_ENV=development" >> $GITHUB_ENV
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures the deploy job runs only after the build job is successful

    steps:
      # Stop the app using PM2 on the remote server
      - name: Stop app using PM2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pm2 stop ${{ env.APP_NAME }} || echo "App not running, skipping stop."
            pm2 delete ${{ env.APP_NAME }} || echo "App not found, skipping delete."
            pm2 save || echo "No PM2 process list to save."

      # Rsync the build files to the remote server
      - name: Rsync deployment
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: -avzr --delete
          path: ./*
          remote_path: "${{ secrets.DEPLOY_DIR }}${{ env.APP_NAME }}/"
          remote_host: "${{ secrets.EC2_PUBLIC_IP }}"
          remote_user: "${{ secrets.EC2_USER }}"
          remote_key: "${{ secrets.EC2_PRIVATE_KEY }}"

      # Start the app using PM2 on the remote server
      - name: Start app using PM2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pm2 start npm --name "${{ env.APP_NAME }}" --cwd ${{ secrets.DEPLOY_DIR }}${{ env.APP_NAME }} -- run NODE_ENV=${{ env.NODE_ENV }} node dist/main

      # Optional: Health check (uncomment if needed)
      # - name: Health check
      #   run: |
      #     echo "Waiting for the app to start..."
      #     RETRIES=5
      #     COUNT=0
      #     until curl -s -f -X 'GET' 'http://ec2-98-83-207-140.compute-1.amazonaws.com:3000/health' -H 'accept: application/json'; do
      #       if [ $COUNT -lt $RETRIES ]; then
      #         COUNT=$((COUNT+1))
      #         echo "Retry $COUNT of $RETRIES..."
      #         sleep 10  # Wait for 10 seconds before retrying
      #       else
      #         echo "Health check failed after $RETRIES attempts."
      #         exit 1
      #       fi
      #     done
      #     echo "Health check passed."
