name: CI

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies using npm ci
      - name: Install dependencies
        run: npm ci

      # Run tests
      - name: Run tests
        run: npm test  # Replace with the correct command to run your tests

      # Build the project
      - name: Build the project
        run: npm run build

      # Check if build output exists
      - name: Check build output
        run: |
          ls -alh ./dist  # Replace with the correct directory name

      # Set the app name based on the branch
      - name: Set app name based on branch
        id: set_app_name
        run: |
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            echo "APP_NAME=mehubarim-server" >> $GITHUB_ENV
            echo "APP_ENV=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == "refs/heads/dev" ]]; then
            echo "APP_NAME=mehubarim-server-dev" >> $GITHUB_ENV
            echo "APP_ENV=dev" >> $GITHUB_ENV
          fi

      # Save the build output as an artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./dist  # Adjust if the output is in a different directory

  deploy:
    needs: build  # This makes the deploy job depend on the build job
    runs-on: ubuntu-latest

    steps:
      # Download the build artifact from the build job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      # Stop the app using PM2 on the remote server
      - name: Stop app using PM2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pm2 stop ${{ env.APP_NAME }} || echo "App not running, skipping stop."
            pm2 delete ${{ env.APP_NAME }} || echo "App not found, skipping delete."
            pm2 save || echo "No PM2 process list to save."

      # Rsync the build files to the remote server
      - name: Rsync deployment
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: -avzr --delete
          path: ./dist/*  # Update this path if your build directory is different
          remote_path: "${{ secrets.DEPLOY_DIR }}${{ env.APP_NAME }}/"
          remote_host: "${{ secrets.EC2_PUBLIC_IP }}"
          remote_user: "${{ secrets.EC2_USER }}"
          remote_key: "${{ secrets.EC2_PRIVATE_KEY }}"

      # Start the app using PM2 on the remote server
      - name: Start app using PM2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pm2 start npm --name "${{ env.APP_NAME }}" --cwd ${{ secrets.DEPLOY_DIR }}${{ env.APP_NAME }} -- run start:${{ env.APP_ENV }}
            pm2 save

      # Health check
      - name: Health check
        run: |
          curl -X 'GET' 'http://ec2-98-83-207-140.compute-1.amazonaws.com:3000/health' -H 'accept: application/json' || exit 1
